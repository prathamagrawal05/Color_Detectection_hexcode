{"ast":null,"code":"const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n  const {\n    size = 1,\n    replace = false,\n    probabilities\n  } = options;\n  let valuesArr;\n  let cumSum;\n  if (typeof values === 'number') {\n    valuesArr = getArray(values);\n  } else {\n    valuesArr = values.slice();\n  }\n  if (probabilities) {\n    if (!replace) {\n      throw new Error('choice with probabilities and no replacement is not implemented');\n    }\n    // check input is sane\n    if (probabilities.length !== valuesArr.length) {\n      throw new Error('the length of probabilities option should be equal to the number of choices');\n    }\n    cumSum = [probabilities[0]];\n    for (let i = 1; i < probabilities.length; i++) {\n      cumSum[i] = cumSum[i - 1] + probabilities[i];\n    }\n    if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n      throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n    }\n  }\n  if (replace === false && size > valuesArr.length) {\n    throw new Error('size option is too large');\n  }\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    const index = randomIndex(valuesArr.length, random, cumSum);\n    result.push(valuesArr[index]);\n    if (!replace) {\n      valuesArr.splice(index, 1);\n    }\n  }\n  return result;\n}\nfunction getArray(n) {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n  const rand = random();\n  if (!cumSum) {\n    return Math.floor(rand * n);\n  } else {\n    let idx = 0;\n    while (rand > cumSum[idx]) {\n      idx++;\n    }\n    return idx;\n  }\n}\nexport default randomChoice;","map":{"version":3,"names":["PROB_TOLERANCE","randomChoice","values","options","random","Math","size","replace","probabilities","valuesArr","cumSum","getArray","slice","Error","length","i","abs","result","index","randomIndex","push","splice","n","arr","rand","floor","idx"],"sources":["/Users/ashraygattani/Documents/most/my-react-app/node_modules/ml-random/lib-es6/choice.js"],"sourcesContent":["const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,UAAU;AACjC,SAASC,YAAYA,CAACC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAGC,IAAI,CAACD,MAAM,EAAE;EAC9D,MAAM;IAAEE,IAAI,GAAG,CAAC;IAAEC,OAAO,GAAG,KAAK;IAAEC;EAAc,CAAC,GAAGL,OAAO;EAC5D,IAAIM,SAAS;EACb,IAAIC,MAAM;EACV,IAAI,OAAOR,MAAM,KAAK,QAAQ,EAAE;IAC5BO,SAAS,GAAGE,QAAQ,CAACT,MAAM,CAAC;EAChC,CAAC,MACI;IACDO,SAAS,GAAGP,MAAM,CAACU,KAAK,CAAC,CAAC;EAC9B;EACA,IAAIJ,aAAa,EAAE;IACf,IAAI,CAACD,OAAO,EAAE;MACV,MAAM,IAAIM,KAAK,CAAC,iEAAiE,CAAC;IACtF;IACA;IACA,IAAIL,aAAa,CAACM,MAAM,KAAKL,SAAS,CAACK,MAAM,EAAE;MAC3C,MAAM,IAAID,KAAK,CAAC,6EAA6E,CAAC;IAClG;IACAH,MAAM,GAAG,CAACF,aAAa,CAAC,CAAC,CAAC,CAAC;IAC3B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,aAAa,CAACM,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC3CL,MAAM,CAACK,CAAC,CAAC,GAAGL,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGP,aAAa,CAACO,CAAC,CAAC;IAChD;IACA,IAAIV,IAAI,CAACW,GAAG,CAAC,CAAC,GAAGN,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGd,cAAc,EAAE;MAC1D,MAAM,IAAIa,KAAK,CAAC,sDAAsDH,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;IACtG;EACJ;EACA,IAAIP,OAAO,KAAK,KAAK,IAAID,IAAI,GAAGG,SAAS,CAACK,MAAM,EAAE;IAC9C,MAAM,IAAID,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,MAAMI,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,EAAES,CAAC,EAAE,EAAE;IAC3B,MAAMG,KAAK,GAAGC,WAAW,CAACV,SAAS,CAACK,MAAM,EAAEV,MAAM,EAAEM,MAAM,CAAC;IAC3DO,MAAM,CAACG,IAAI,CAACX,SAAS,CAACS,KAAK,CAAC,CAAC;IAC7B,IAAI,CAACX,OAAO,EAAE;MACVE,SAAS,CAACY,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAC9B;EACJ;EACA,OAAOD,MAAM;AACjB;AACA,SAASN,QAAQA,CAACW,CAAC,EAAE;EACjB,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,CAAC,EAAEP,CAAC,EAAE,EAAE;IACxBQ,GAAG,CAACH,IAAI,CAACL,CAAC,CAAC;EACf;EACA,OAAOQ,GAAG;AACd;AACA,SAASJ,WAAWA,CAACG,CAAC,EAAElB,MAAM,EAAEM,MAAM,EAAE;EACpC,MAAMc,IAAI,GAAGpB,MAAM,CAAC,CAAC;EACrB,IAAI,CAACM,MAAM,EAAE;IACT,OAAOL,IAAI,CAACoB,KAAK,CAACD,IAAI,GAAGF,CAAC,CAAC;EAC/B,CAAC,MACI;IACD,IAAII,GAAG,GAAG,CAAC;IACX,OAAOF,IAAI,GAAGd,MAAM,CAACgB,GAAG,CAAC,EAAE;MACvBA,GAAG,EAAE;IACT;IACA,OAAOA,GAAG;EACd;AACJ;AACA,eAAezB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}