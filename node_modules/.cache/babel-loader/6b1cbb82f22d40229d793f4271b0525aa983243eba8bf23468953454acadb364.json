{"ast":null,"code":"var _jsxFileName = \"/Users/ashraygattani/Documents/most/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [colors, setColors] = useState([]);\n  const [percentages, setPercentages] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const canvasRef = useRef(null);\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setImageURL(url);\n      extractColors(url);\n    }\n  };\n  const extractColors = url => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n    img.onload = () => {\n      // Resize image for faster processing\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Get pixel data\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = imageData.data;\n      const pixelData = [];\n      for (let i = 0; i < pixels.length; i += 4) {\n        const r = pixels[i];\n        const g = pixels[i + 1];\n        const b = pixels[i + 2];\n        // Ignore transparent pixels\n        const a = pixels[i + 3];\n        if (a > 0) {\n          pixelData.push([r, g, b]);\n        }\n      }\n\n      // Run KMeans\n      const numberOfClusters = 5;\n      const {\n        clusters,\n        centroids\n      } = KMeans(pixelData, numberOfClusters);\n\n      // Calculate percentages\n      const counts = {};\n      clusters.forEach(cluster => {\n        counts[cluster] = (counts[cluster] || 0) + 1;\n      });\n      const total = pixelData.length;\n      const colorData = centroids.map((centroid, index) => {\n        const percentage = (counts[index] || 0) / total * 100;\n        const hex = rgbToHex(centroid[0], centroid[1], centroid[2]);\n        return {\n          hex,\n          percentage\n        };\n      });\n\n      // Sort colors by percentage descending\n      colorData.sort((a, b) => b.percentage - a.percentage);\n      setColors(colorData.map(c => c.hex));\n      setPercentages(colorData.map(c => c.percentage.toFixed(2)));\n    };\n  };\n  const rgbToHex = (r, g, b) => {\n    return ('#' + [r, g, b].map(x => {\n      const hex = x.toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }).join('')).toUpperCase();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Image Color Palette\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), imageURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageURL,\n        alt: \"Uploaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), colors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-container\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-block\",\n        style: {\n          backgroundColor: color,\n          flexBasis: `${percentages[index]}%`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-code\",\n          children: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"percentage\",\n          children: [percentages[index], \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mM0qZJ7CNCqRODt8rTr638bVq2A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","App","_s","colors","setColors","percentages","setPercentages","imageURL","setImageURL","canvasRef","handleImageUpload","event","file","target","files","url","URL","createObjectURL","extractColors","canvas","current","ctx","getContext","img","Image","crossOrigin","src","onload","MAX_WIDTH","scaleSize","width","height","drawImage","imageData","getImageData","pixels","data","pixelData","i","length","r","g","b","a","push","numberOfClusters","clusters","centroids","KMeans","counts","forEach","cluster","total","colorData","map","centroid","index","percentage","hex","rgbToHex","sort","c","toFixed","x","toString","join","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","alt","color","style","backgroundColor","flexBasis","ref","display","_c","$RefreshReg$"],"sources":["/Users/ashraygattani/Documents/most/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport './App.css';\n\nfunction App() {\n  const [colors, setColors] = useState([]);\n  const [percentages, setPercentages] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const canvasRef = useRef(null);\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setImageURL(url);\n      extractColors(url);\n    }\n  };\n\n  const extractColors = (url) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n\n    img.onload = () => {\n      // Resize image for faster processing\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      // Get pixel data\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = imageData.data;\n      const pixelData = [];\n\n      for (let i = 0; i < pixels.length; i += 4) {\n        const r = pixels[i];\n        const g = pixels[i + 1];\n        const b = pixels[i + 2];\n        // Ignore transparent pixels\n        const a = pixels[i + 3];\n        if (a > 0) {\n          pixelData.push([r, g, b]);\n        }\n      }\n\n      // Run KMeans\n      const numberOfClusters = 5;\n      const { clusters, centroids } = KMeans(pixelData, numberOfClusters);\n\n      // Calculate percentages\n      const counts = {};\n      clusters.forEach((cluster) => {\n        counts[cluster] = (counts[cluster] || 0) + 1;\n      });\n\n      const total = pixelData.length;\n      const colorData = centroids.map((centroid, index) => {\n        const percentage = ((counts[index] || 0) / total) * 100;\n        const hex = rgbToHex(centroid[0], centroid[1], centroid[2]);\n        return { hex, percentage };\n      });\n\n      // Sort colors by percentage descending\n      colorData.sort((a, b) => b.percentage - a.percentage);\n\n      setColors(colorData.map((c) => c.hex));\n      setPercentages(colorData.map((c) => c.percentage.toFixed(2)));\n    };\n  };\n\n  const rgbToHex = (r, g, b) => {\n    return (\n      '#' +\n      [r, g, b]\n        .map((x) => {\n          const hex = x.toString(16);\n          return hex.length === 1 ? '0' + hex : hex;\n        })\n        .join('')\n    ).toUpperCase();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Image Color Palette</h1>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n\n      {imageURL && (\n        <div className=\"image-preview\">\n          <img src={imageURL} alt=\"Uploaded\" />\n        </div>\n      )}\n\n      {colors.length > 0 && (\n        <div className=\"color-container\">\n          {colors.map((color, index) => (\n            <div\n              key={index}\n              className=\"color-block\"\n              style={{ backgroundColor: color, flexBasis: `${percentages[index]}%` }}\n            >\n              <div className=\"hex-code\">{color}</div>\n              <div className=\"percentage\">{percentages[index]}%</div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Hidden canvas for processing */}\n      <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}