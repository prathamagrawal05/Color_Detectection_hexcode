{"ast":null,"code":"// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n  /**\n   * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n   */\n  constructor(seedOrRandom = Math.random) {\n    if (typeof seedOrRandom === 'number') {\n      const xsadd = new XSAdd(seedOrRandom);\n      this.randomGenerator = xsadd.random;\n    } else {\n      this.randomGenerator = seedOrRandom;\n    }\n  }\n  choice(values, options) {\n    if (typeof values === 'number') {\n      return choice(values, options, this.randomGenerator);\n    }\n    return choice(values, options, this.randomGenerator);\n  }\n  /**\n   * Draw a random number from a uniform distribution on [0,1)\n   * @return The random number\n   */\n  random() {\n    return this.randomGenerator();\n  }\n  /**\n   * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n   * @param low - The lower bound of the uniform distribution interval.\n   * @param high - The higher bound of the uniform distribution interval.\n   */\n  randInt(low, high) {\n    if (high === undefined) {\n      high = low;\n      low = 0;\n    }\n    return low + Math.floor(this.randomGenerator() * (high - low));\n  }\n  /**\n   * Draw several random number from a uniform distribution on [0, 1)\n   * @param size - The number of number to draw\n   * @return - The list of drawn numbers.\n   */\n  randomSample(size) {\n    const result = [];\n    for (let i = 0; i < size; i++) {\n      result.push(this.random());\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["XSAdd","choice","Random","constructor","seedOrRandom","Math","random","xsadd","randomGenerator","values","options","randInt","low","high","undefined","floor","randomSample","size","result","i","push"],"sources":["/Users/ashraygattani/Documents/most/my-react-app/node_modules/ml-random/lib-es6/index.js"],"sourcesContent":["// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,UAAU;AAC5B,OAAOC,MAAM,MAAM,UAAU;AAC7B;AACA;AACA;AACA,eAAe,MAAMC,MAAM,CAAC;EACxB;AACJ;AACA;EACIC,WAAWA,CAACC,YAAY,GAAGC,IAAI,CAACC,MAAM,EAAE;IACpC,IAAI,OAAOF,YAAY,KAAK,QAAQ,EAAE;MAClC,MAAMG,KAAK,GAAG,IAAIP,KAAK,CAACI,YAAY,CAAC;MACrC,IAAI,CAACI,eAAe,GAAGD,KAAK,CAACD,MAAM;IACvC,CAAC,MACI;MACD,IAAI,CAACE,eAAe,GAAGJ,YAAY;IACvC;EACJ;EACAH,MAAMA,CAACQ,MAAM,EAAEC,OAAO,EAAE;IACpB,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAC5B,OAAOR,MAAM,CAACQ,MAAM,EAAEC,OAAO,EAAE,IAAI,CAACF,eAAe,CAAC;IACxD;IACA,OAAOP,MAAM,CAACQ,MAAM,EAAEC,OAAO,EAAE,IAAI,CAACF,eAAe,CAAC;EACxD;EACA;AACJ;AACA;AACA;EACIF,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACE,eAAe,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;EACIG,OAAOA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACf,IAAIA,IAAI,KAAKC,SAAS,EAAE;MACpBD,IAAI,GAAGD,GAAG;MACVA,GAAG,GAAG,CAAC;IACX;IACA,OAAOA,GAAG,GAAGP,IAAI,CAACU,KAAK,CAAC,IAAI,CAACP,eAAe,CAAC,CAAC,IAAIK,IAAI,GAAGD,GAAG,CAAC,CAAC;EAClE;EACA;AACJ;AACA;AACA;AACA;EACII,YAAYA,CAACC,IAAI,EAAE;IACf,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;MAC3BD,MAAM,CAACE,IAAI,CAAC,IAAI,CAACd,MAAM,CAAC,CAAC,CAAC;IAC9B;IACA,OAAOY,MAAM;EACjB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}