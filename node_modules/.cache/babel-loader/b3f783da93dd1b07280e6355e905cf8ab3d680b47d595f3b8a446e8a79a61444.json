{"ast":null,"code":"var _jsxFileName = \"/Users/ashraygattani/Documents/most/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [colors, setColors] = useState([]);\n  const [percentages, setPercentages] = useState([]); // State for percentages\n  const [loading, setLoading] = useState(false);\n  const [imageSrc, setImageSrc] = useState(null);\n  const canvasRef = useRef(null);\n  const handleUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        setImageSrc(event.target.result); // Set the uploaded image\n        extractColors(event.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n  const kMeans = (pixels, k = 5, maxIter = 10) => {\n    const getRandomCentroids = (pixels, k) => {\n      let centroids = [];\n      for (let i = 0; i < k; i++) {\n        centroids.push(pixels[Math.floor(Math.random() * pixels.length)]);\n      }\n      return centroids;\n    };\n    const getDistance = (p1, p2) => {\n      return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));\n    };\n    const assignPixelsToCentroids = (pixels, centroids) => {\n      return pixels.map(pixel => {\n        let minDist = Infinity;\n        let closestCentroid = -1;\n        centroids.forEach((centroid, idx) => {\n          const dist = getDistance(pixel, centroid);\n          if (dist < minDist) {\n            minDist = dist;\n            closestCentroid = idx;\n          }\n        });\n        return closestCentroid;\n      });\n    };\n    const computeNewCentroids = (pixels, assignments, k) => {\n      const sums = Array(k).fill(null).map(() => [0, 0, 0]);\n      const counts = Array(k).fill(0);\n      assignments.forEach((assignment, i) => {\n        sums[assignment][0] += pixels[i][0];\n        sums[assignment][1] += pixels[i][1];\n        sums[assignment][2] += pixels[i][2];\n        counts[assignment]++;\n      });\n      return sums.map((sum, idx) => counts[idx] === 0 ? sum : [Math.floor(sum[0] / counts[idx]), Math.floor(sum[1] / counts[idx]), Math.floor(sum[2] / counts[idx])]);\n    };\n    let centroids = getRandomCentroids(pixels, k);\n    let assignments = [];\n    for (let i = 0; i < maxIter; i++) {\n      assignments = assignPixelsToCentroids(pixels, centroids);\n      centroids = computeNewCentroids(pixels, assignments, k);\n    }\n\n    // Calculate percentages\n    const colorCounts = Array(k).fill(0);\n    assignments.forEach(a => colorCounts[a]++);\n    const totalPixels = pixels.length;\n    const percentages = colorCounts.map(count => count / totalPixels * 100);\n    return {\n      centroids,\n      percentages\n    };\n  };\n  const extractColors = url => {\n    setLoading(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n    img.onload = () => {\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = [];\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        pixels.push([imageData.data[i], imageData.data[i + 1], imageData.data[i + 2]]);\n      }\n\n      // Get centroids and percentages\n      const {\n        centroids,\n        percentages\n      } = kMeans(pixels, 5);\n      const hexColors = centroids.map(c => rgbToHex(c[0], c[1], c[2]));\n      setColors(hexColors);\n      setPercentages(percentages); // Set percentages\n      setLoading(false);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFA8 Dominant Color Extractor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Discover the hidden colors in your images! Upload any image and see the most dominant colors extracted with their hex codes. Perfect for designers, artists, and color enthusiasts!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleUpload,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), imageSrc && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Uploaded Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageSrc,\n        alt: \"Uploaded\",\n        className: \"uploaded-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-container\",\n        children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-swatch\",\n            style: {\n              backgroundColor: color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"color-hex\",\n            children: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"percentage-bar\",\n            style: {\n              width: `${percentages[index]}%`,\n              backgroundColor: color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"percentage-text\",\n            children: [percentages[index].toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"use-cases\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Use Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83D\\uDC57 Fashion Designers: Get color palettes from clothing photos.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83C\\uDFA8 Artists: Extract colors from your reference images.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83C\\uDFE0 Interior Designers: Analyze room colors for design projects.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83D\\uDCF1 App Developers: Create color schemes based on images for UIs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD83D\\uDCCA Data Visualization: Extract colors for better data representation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"P609jHKcrYbA2RPVwl5vIrKcc3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","App","_s","colors","setColors","percentages","setPercentages","loading","setLoading","imageSrc","setImageSrc","canvasRef","handleUpload","e","file","target","files","reader","FileReader","onload","event","result","extractColors","readAsDataURL","rgbToHex","r","g","b","toString","slice","kMeans","pixels","k","maxIter","getRandomCentroids","centroids","i","push","Math","floor","random","length","getDistance","p1","p2","sqrt","pow","assignPixelsToCentroids","map","pixel","minDist","Infinity","closestCentroid","forEach","centroid","idx","dist","computeNewCentroids","assignments","sums","Array","fill","counts","assignment","sum","colorCounts","a","totalPixels","count","url","canvas","current","ctx","getContext","img","Image","crossOrigin","src","MAX_WIDTH","scaleSize","width","height","drawImage","imageData","getImageData","data","hexColors","c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","ref","style","display","alt","color","index","backgroundColor","toFixed","_c","$RefreshReg$"],"sources":["/Users/ashraygattani/Documents/most/my-react-app/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css'; // Import the CSS file\n\nfunction App() {\n  const [colors, setColors] = useState([]);\n  const [percentages, setPercentages] = useState([]); // State for percentages\n  const [loading, setLoading] = useState(false);\n  const [imageSrc, setImageSrc] = useState(null);\n  const canvasRef = useRef(null);\n\n  const handleUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setImageSrc(event.target.result); // Set the uploaded image\n        extractColors(event.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n\n  const kMeans = (pixels, k = 5, maxIter = 10) => {\n    const getRandomCentroids = (pixels, k) => {\n      let centroids = [];\n      for (let i = 0; i < k; i++) {\n        centroids.push(pixels[Math.floor(Math.random() * pixels.length)]);\n      }\n      return centroids;\n    };\n\n    const getDistance = (p1, p2) => {\n      return Math.sqrt(\n        Math.pow(p1[0] - p2[0], 2) +\n        Math.pow(p1[1] - p2[1], 2) +\n        Math.pow(p1[2] - p2[2], 2)\n      );\n    };\n\n    const assignPixelsToCentroids = (pixels, centroids) => {\n      return pixels.map(pixel => {\n        let minDist = Infinity;\n        let closestCentroid = -1;\n\n        centroids.forEach((centroid, idx) => {\n          const dist = getDistance(pixel, centroid);\n          if (dist < minDist) {\n            minDist = dist;\n            closestCentroid = idx;\n          }\n        });\n\n        return closestCentroid;\n      });\n    };\n\n    const computeNewCentroids = (pixels, assignments, k) => {\n      const sums = Array(k).fill(null).map(() => [0, 0, 0]);\n      const counts = Array(k).fill(0);\n\n      assignments.forEach((assignment, i) => {\n        sums[assignment][0] += pixels[i][0];\n        sums[assignment][1] += pixels[i][1];\n        sums[assignment][2] += pixels[i][2];\n        counts[assignment]++;\n      });\n\n      return sums.map((sum, idx) => counts[idx] === 0\n        ? sum\n        : [Math.floor(sum[0] / counts[idx]), Math.floor(sum[1] / counts[idx]), Math.floor(sum[2] / counts[idx])]\n      );\n    };\n\n    let centroids = getRandomCentroids(pixels, k);\n    let assignments = [];\n    for (let i = 0; i < maxIter; i++) {\n      assignments = assignPixelsToCentroids(pixels, centroids);\n      centroids = computeNewCentroids(pixels, assignments, k);\n    }\n\n    // Calculate percentages\n    const colorCounts = Array(k).fill(0);\n    assignments.forEach(a => colorCounts[a]++);\n\n    const totalPixels = pixels.length;\n    const percentages = colorCounts.map(count => (count / totalPixels) * 100);\n\n    return { centroids, percentages };\n  };\n\n  const extractColors = (url) => {\n    setLoading(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n\n    img.onload = () => {\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = [];\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        pixels.push([imageData.data[i], imageData.data[i + 1], imageData.data[i + 2]]);\n      }\n\n      // Get centroids and percentages\n      const { centroids, percentages } = kMeans(pixels, 5);\n      const hexColors = centroids.map(c => rgbToHex(c[0], c[1], c[2]));\n\n      setColors(hexColors);\n      setPercentages(percentages); // Set percentages\n      setLoading(false);\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"intro\">\n        <h1>🎨 Dominant Color Extractor</h1>\n        <p>Discover the hidden colors in your images! Upload any image and see the most dominant colors extracted with their hex codes. Perfect for designers, artists, and color enthusiasts!</p>\n      </div>\n      <input type=\"file\" onChange={handleUpload} accept=\"image/*\" />\n      <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>\n      \n      {imageSrc && !loading && (\n        <div className=\"image-preview\">\n          <h2>Uploaded Image</h2>\n          <img src={imageSrc} alt=\"Uploaded\" className=\"uploaded-image\" />\n        </div>\n      )}\n      \n      {loading ? <p>Loading...</p> : (\n        <div>\n          <div className=\"color-container\">\n            {colors.map((color, index) => (\n              <div key={index} className=\"color-block\">\n                <div className=\"color-swatch\" style={{ backgroundColor: color }}></div>\n                <p className=\"color-hex\">{color}</p>\n                <div className=\"percentage-bar\" style={{ width: `${percentages[index]}%`, backgroundColor: color }}></div>\n                <p className=\"percentage-text\">{percentages[index].toFixed(2)}%</p>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"use-cases\">\n            <h2>Use Cases</h2>\n            <ul>\n              <li>👗 Fashion Designers: Get color palettes from clothing photos.</li>\n              <li>🎨 Artists: Extract colors from your reference images.</li>\n              <li>🏠 Interior Designers: Analyze room colors for design projects.</li>\n              <li>📱 App Developers: Create color schemes based on images for UIs.</li>\n              <li>📊 Data Visualization: Extract colors for better data representation.</li>\n            </ul>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMa,SAAS,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMe,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzBV,WAAW,CAACU,KAAK,CAACL,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC;QAClCC,aAAa,CAACF,KAAK,CAACL,MAAM,CAACM,MAAM,CAAC;MACpC,CAAC;MACDJ,MAAM,CAACM,aAAa,CAACT,IAAI,CAAC;IAC5B;EACF,CAAC;EAED,MAAMU,QAAQ,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IAC5B,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAKF,CAAC,IAAI,EAAE,CAAC,IAAIC,CAAC,IAAI,CAAC,CAAC,GAAGC,CAAC,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3E,CAAC;EAED,MAAMC,MAAM,GAAGA,CAACC,MAAM,EAAEC,CAAC,GAAG,CAAC,EAAEC,OAAO,GAAG,EAAE,KAAK;IAC9C,MAAMC,kBAAkB,GAAGA,CAACH,MAAM,EAAEC,CAAC,KAAK;MACxC,IAAIG,SAAS,GAAG,EAAE;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;QAC1BD,SAAS,CAACE,IAAI,CAACN,MAAM,CAACO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,MAAM,CAACU,MAAM,CAAC,CAAC,CAAC;MACnE;MACA,OAAON,SAAS;IAClB,CAAC;IAED,MAAMO,WAAW,GAAGA,CAACC,EAAE,EAAEC,EAAE,KAAK;MAC9B,OAAON,IAAI,CAACO,IAAI,CACdP,IAAI,CAACQ,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAC1BN,IAAI,CAACQ,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAC1BN,IAAI,CAACQ,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAC3B,CAAC;IACH,CAAC;IAED,MAAMG,uBAAuB,GAAGA,CAAChB,MAAM,EAAEI,SAAS,KAAK;MACrD,OAAOJ,MAAM,CAACiB,GAAG,CAACC,KAAK,IAAI;QACzB,IAAIC,OAAO,GAAGC,QAAQ;QACtB,IAAIC,eAAe,GAAG,CAAC,CAAC;QAExBjB,SAAS,CAACkB,OAAO,CAAC,CAACC,QAAQ,EAAEC,GAAG,KAAK;UACnC,MAAMC,IAAI,GAAGd,WAAW,CAACO,KAAK,EAAEK,QAAQ,CAAC;UACzC,IAAIE,IAAI,GAAGN,OAAO,EAAE;YAClBA,OAAO,GAAGM,IAAI;YACdJ,eAAe,GAAGG,GAAG;UACvB;QACF,CAAC,CAAC;QAEF,OAAOH,eAAe;MACxB,CAAC,CAAC;IACJ,CAAC;IAED,MAAMK,mBAAmB,GAAGA,CAAC1B,MAAM,EAAE2B,WAAW,EAAE1B,CAAC,KAAK;MACtD,MAAM2B,IAAI,GAAGC,KAAK,CAAC5B,CAAC,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAACb,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACrD,MAAMc,MAAM,GAAGF,KAAK,CAAC5B,CAAC,CAAC,CAAC6B,IAAI,CAAC,CAAC,CAAC;MAE/BH,WAAW,CAACL,OAAO,CAAC,CAACU,UAAU,EAAE3B,CAAC,KAAK;QACrCuB,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAIhC,MAAM,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnCuB,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAIhC,MAAM,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnCuB,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAIhC,MAAM,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC0B,MAAM,CAACC,UAAU,CAAC,EAAE;MACtB,CAAC,CAAC;MAEF,OAAOJ,IAAI,CAACX,GAAG,CAAC,CAACgB,GAAG,EAAET,GAAG,KAAKO,MAAM,CAACP,GAAG,CAAC,KAAK,CAAC,GAC3CS,GAAG,GACH,CAAC1B,IAAI,CAACC,KAAK,CAACyB,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACP,GAAG,CAAC,CAAC,EAAEjB,IAAI,CAACC,KAAK,CAACyB,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACP,GAAG,CAAC,CAAC,EAAEjB,IAAI,CAACC,KAAK,CAACyB,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACP,GAAG,CAAC,CAAC,CACzG,CAAC;IACH,CAAC;IAED,IAAIpB,SAAS,GAAGD,kBAAkB,CAACH,MAAM,EAAEC,CAAC,CAAC;IAC7C,IAAI0B,WAAW,GAAG,EAAE;IACpB,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;MAChCsB,WAAW,GAAGX,uBAAuB,CAAChB,MAAM,EAAEI,SAAS,CAAC;MACxDA,SAAS,GAAGsB,mBAAmB,CAAC1B,MAAM,EAAE2B,WAAW,EAAE1B,CAAC,CAAC;IACzD;;IAEA;IACA,MAAMiC,WAAW,GAAGL,KAAK,CAAC5B,CAAC,CAAC,CAAC6B,IAAI,CAAC,CAAC,CAAC;IACpCH,WAAW,CAACL,OAAO,CAACa,CAAC,IAAID,WAAW,CAACC,CAAC,CAAC,EAAE,CAAC;IAE1C,MAAMC,WAAW,GAAGpC,MAAM,CAACU,MAAM;IACjC,MAAMpC,WAAW,GAAG4D,WAAW,CAACjB,GAAG,CAACoB,KAAK,IAAKA,KAAK,GAAGD,WAAW,GAAI,GAAG,CAAC;IAEzE,OAAO;MAAEhC,SAAS;MAAE9B;IAAY,CAAC;EACnC,CAAC;EAED,MAAMiB,aAAa,GAAI+C,GAAG,IAAK;IAC7B7D,UAAU,CAAC,IAAI,CAAC;IAChB,MAAM8D,MAAM,GAAG3D,SAAS,CAAC4D,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,WAAW,GAAG,WAAW;IAC7BF,GAAG,CAACG,GAAG,GAAGR,GAAG;IAEbK,GAAG,CAACvD,MAAM,GAAG,MAAM;MACjB,MAAM2D,SAAS,GAAG,GAAG;MACrB,MAAMC,SAAS,GAAGD,SAAS,GAAGJ,GAAG,CAACM,KAAK;MACvCV,MAAM,CAACU,KAAK,GAAGF,SAAS;MACxBR,MAAM,CAACW,MAAM,GAAGP,GAAG,CAACO,MAAM,GAAGF,SAAS;MACtCP,GAAG,CAACU,SAAS,CAACR,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,MAAM,CAAC;MAErD,MAAME,SAAS,GAAGX,GAAG,CAACY,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEd,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,MAAM,CAAC;MACrE,MAAMlD,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+C,SAAS,CAACE,IAAI,CAAC5C,MAAM,EAAEL,CAAC,IAAI,CAAC,EAAE;QACjDL,MAAM,CAACM,IAAI,CAAC,CAAC8C,SAAS,CAACE,IAAI,CAACjD,CAAC,CAAC,EAAE+C,SAAS,CAACE,IAAI,CAACjD,CAAC,GAAG,CAAC,CAAC,EAAE+C,SAAS,CAACE,IAAI,CAACjD,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChF;;MAEA;MACA,MAAM;QAAED,SAAS;QAAE9B;MAAY,CAAC,GAAGyB,MAAM,CAACC,MAAM,EAAE,CAAC,CAAC;MACpD,MAAMuD,SAAS,GAAGnD,SAAS,CAACa,GAAG,CAACuC,CAAC,IAAI/D,QAAQ,CAAC+D,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAEhEnF,SAAS,CAACkF,SAAS,CAAC;MACpBhF,cAAc,CAACD,WAAW,CAAC,CAAC,CAAC;MAC7BG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;EACH,CAAC;EAED,oBACER,OAAA;IAAKwF,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzF,OAAA;MAAKwF,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpBzF,OAAA;QAAAyF,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC7F,OAAA;QAAAyF,QAAA,EAAG;MAAmL;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvL,CAAC,eACN7F,OAAA;MAAO8F,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEnF,YAAa;MAACoF,MAAM,EAAC;IAAS;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9D7F,OAAA;MAAQiG,GAAG,EAAEtF,SAAU;MAACuF,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EAE5DpF,QAAQ,IAAI,CAACF,OAAO,iBACnBP,OAAA;MAAKwF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BzF,OAAA;QAAAyF,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB7F,OAAA;QAAK6E,GAAG,EAAEpE,QAAS;QAAC2F,GAAG,EAAC,UAAU;QAACZ,SAAS,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CACN,EAEAtF,OAAO,gBAAGP,OAAA;MAAAyF,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAC1B7F,OAAA;MAAAyF,QAAA,gBACEzF,OAAA;QAAKwF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC7BtF,MAAM,CAAC6C,GAAG,CAAC,CAACqD,KAAK,EAAEC,KAAK,kBACvBtG,OAAA;UAAiBwF,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACtCzF,OAAA;YAAKwF,SAAS,EAAC,cAAc;YAACU,KAAK,EAAE;cAAEK,eAAe,EAAEF;YAAM;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvE7F,OAAA;YAAGwF,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAEY;UAAK;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpC7F,OAAA;YAAKwF,SAAS,EAAC,gBAAgB;YAACU,KAAK,EAAE;cAAElB,KAAK,EAAE,GAAG3E,WAAW,CAACiG,KAAK,CAAC,GAAG;cAAEC,eAAe,EAAEF;YAAM;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC1G7F,OAAA;YAAGwF,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAEpF,WAAW,CAACiG,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;UAAA;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA,GAJ3DS,KAAK;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN7F,OAAA;QAAKwF,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBzF,OAAA;UAAAyF,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClB7F,OAAA;UAAAyF,QAAA,gBACEzF,OAAA;YAAAyF,QAAA,EAAI;UAA8D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvE7F,OAAA;YAAAyF,QAAA,EAAI;UAAsD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/D7F,OAAA;YAAAyF,QAAA,EAAI;UAA+D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxE7F,OAAA;YAAAyF,QAAA,EAAI;UAAgE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzE7F,OAAA;YAAAyF,QAAA,EAAI;UAAqE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3F,EAAA,CArKQD,GAAG;AAAAwG,EAAA,GAAHxG,GAAG;AAuKZ,eAAeA,GAAG;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}