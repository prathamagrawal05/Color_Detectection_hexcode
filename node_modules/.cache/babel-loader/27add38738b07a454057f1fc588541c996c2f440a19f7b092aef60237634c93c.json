{"ast":null,"code":"var _jsxFileName = \"/Users/ashraygattani/Documents/most/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [colors, setColors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const canvasRef = useRef(null);\n  const handleUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        extractColors(event.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n  const kMeans = (pixels, k = 5, maxIter = 10) => {\n    const getRandomCentroids = (pixels, k) => {\n      let centroids = [];\n      for (let i = 0; i < k; i++) {\n        centroids.push(pixels[Math.floor(Math.random() * pixels.length)]);\n      }\n      return centroids;\n    };\n    const getDistance = (p1, p2) => {\n      return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));\n    };\n    const assignPixelsToCentroids = (pixels, centroids) => {\n      return pixels.map(pixel => {\n        let minDist = Infinity;\n        let closestCentroid = -1;\n        centroids.forEach((centroid, idx) => {\n          const dist = getDistance(pixel, centroid);\n          if (dist < minDist) {\n            minDist = dist;\n            closestCentroid = idx;\n          }\n        });\n        return closestCentroid;\n      });\n    };\n    const computeNewCentroids = (pixels, assignments, k) => {\n      const sums = Array(k).fill(null).map(() => [0, 0, 0]);\n      const counts = Array(k).fill(0);\n      assignments.forEach((assignment, i) => {\n        sums[assignment][0] += pixels[i][0];\n        sums[assignment][1] += pixels[i][1];\n        sums[assignment][2] += pixels[i][2];\n        counts[assignment]++;\n      });\n      return sums.map((sum, idx) => counts[idx] === 0 ? sum : [Math.floor(sum[0] / counts[idx]), Math.floor(sum[1] / counts[idx]), Math.floor(sum[2] / counts[idx])]);\n    };\n    let centroids = getRandomCentroids(pixels, k);\n    let assignments = [];\n    for (let i = 0; i < maxIter; i++) {\n      assignments = assignPixelsToCentroids(pixels, centroids);\n      centroids = computeNewCentroids(pixels, assignments, k);\n    }\n    return centroids;\n  };\n  const extractColors = url => {\n    setLoading(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n    img.onload = () => {\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = [];\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        pixels.push([imageData.data[i], imageData.data[i + 1], imageData.data[i + 2]]);\n      }\n      const centroids = kMeans(pixels, 5);\n      const hexColors = centroids.map(c => rgbToHex(c[0], c[1], c[2]));\n      setColors(hexColors);\n      setLoading(false);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFA8 Dominant Color Extractor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Discover the hidden colors in your images! Upload any image and see the most dominant colors extracted with their hex codes. Perfect for designers, artists, and color enthusiasts!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleUpload,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-container\",\n      children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-swatch\",\n          style: {\n            backgroundColor: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"color-hex\",\n          children: color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6mtNu2mPYUNhbzMNhyDNkXX3dL0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","App","_s","colors","setColors","loading","setLoading","canvasRef","handleUpload","e","file","target","files","reader","FileReader","onload","event","extractColors","result","readAsDataURL","rgbToHex","r","g","b","toString","slice","kMeans","pixels","k","maxIter","getRandomCentroids","centroids","i","push","Math","floor","random","length","getDistance","p1","p2","sqrt","pow","assignPixelsToCentroids","map","pixel","minDist","Infinity","closestCentroid","forEach","centroid","idx","dist","computeNewCentroids","assignments","sums","Array","fill","counts","assignment","sum","url","canvas","current","ctx","getContext","img","Image","crossOrigin","src","MAX_WIDTH","scaleSize","width","height","drawImage","imageData","getImageData","data","hexColors","c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","ref","style","display","color","index","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/ashraygattani/Documents/most/my-react-app/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css'; // Import the CSS file\n\nfunction App() {\n  const [colors, setColors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const canvasRef = useRef(null);\n\n  const handleUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        extractColors(event.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  };\n\n  const kMeans = (pixels, k = 5, maxIter = 10) => {\n    const getRandomCentroids = (pixels, k) => {\n      let centroids = [];\n      for (let i = 0; i < k; i++) {\n        centroids.push(pixels[Math.floor(Math.random() * pixels.length)]);\n      }\n      return centroids;\n    };\n\n    const getDistance = (p1, p2) => {\n      return Math.sqrt(\n        Math.pow(p1[0] - p2[0], 2) +\n        Math.pow(p1[1] - p2[1], 2) +\n        Math.pow(p1[2] - p2[2], 2)\n      );\n    };\n\n    const assignPixelsToCentroids = (pixels, centroids) => {\n      return pixels.map(pixel => {\n        let minDist = Infinity;\n        let closestCentroid = -1;\n\n        centroids.forEach((centroid, idx) => {\n          const dist = getDistance(pixel, centroid);\n          if (dist < minDist) {\n            minDist = dist;\n            closestCentroid = idx;\n          }\n        });\n\n        return closestCentroid;\n      });\n    };\n\n    const computeNewCentroids = (pixels, assignments, k) => {\n      const sums = Array(k).fill(null).map(() => [0, 0, 0]);\n      const counts = Array(k).fill(0);\n\n      assignments.forEach((assignment, i) => {\n        sums[assignment][0] += pixels[i][0];\n        sums[assignment][1] += pixels[i][1];\n        sums[assignment][2] += pixels[i][2];\n        counts[assignment]++;\n      });\n\n      return sums.map((sum, idx) => counts[idx] === 0\n        ? sum\n        : [Math.floor(sum[0] / counts[idx]), Math.floor(sum[1] / counts[idx]), Math.floor(sum[2] / counts[idx])]\n      );\n    };\n\n    let centroids = getRandomCentroids(pixels, k);\n    let assignments = [];\n    for (let i = 0; i < maxIter; i++) {\n      assignments = assignPixelsToCentroids(pixels, centroids);\n      centroids = computeNewCentroids(pixels, assignments, k);\n    }\n\n    return centroids;\n  };\n\n  const extractColors = (url) => {\n    setLoading(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n\n    img.onload = () => {\n      const MAX_WIDTH = 200;\n      const scaleSize = MAX_WIDTH / img.width;\n      canvas.width = MAX_WIDTH;\n      canvas.height = img.height * scaleSize;\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const pixels = [];\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        pixels.push([imageData.data[i], imageData.data[i + 1], imageData.data[i + 2]]);\n      }\n\n      const centroids = kMeans(pixels, 5);\n      const hexColors = centroids.map(c => rgbToHex(c[0], c[1], c[2]));\n\n      setColors(hexColors);\n      setLoading(false);\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"intro\">\n        <h1>🎨 Dominant Color Extractor</h1>\n        <p>Discover the hidden colors in your images! Upload any image and see the most dominant colors extracted with their hex codes. Perfect for designers, artists, and color enthusiasts!</p>\n      </div>\n      <input type=\"file\" onChange={handleUpload} accept=\"image/*\" />\n      <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>\n      {loading ? <p>Loading...</p> : (\n        <div className=\"color-container\">\n          {colors.map((color, index) => (\n            <div key={index} className=\"color-block\">\n              <div className=\"color-swatch\" style={{ backgroundColor: color }}></div>\n              <p className=\"color-hex\">{color}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}